---
version: '3.7'
services:
  ## MySQL Docker Compose Config
  ##postgres-order:
  ##  container_name: postgres-order
  ##  image: postgres
  ##  environment:
  ##    POSTGRES_DB: order-service
  ##    POSTGRES_USER: postgres
  ##    POSTGRES_PASSWORD: password
  ##    PGDATA: /data/postgres
  ##  volumes:
  ##    - ./postgres-order:/data/postgres
  ##  expose:
  ##    - "5431"
  ##  ports:
  ##    - "5431:5431"
  ##  command: -p 5431
  ##  restart: always

  ##postgres-inventory:
  ##  container_name: postgres-inventory
  ##  image: postgres
  ##  environment:
  ##    POSTGRES_DB: inventory-service
  ##    POSTGRES_USER: postgres
  ##    POSTGRES_PASSWORD: password
  ##    PGDATA: /data/postgres
  ##  volumes:
  ##    - ./postgres-inventory:/data/postgres
  ##  ports:
  ##    - "5432:5432"
  ##  restart: always

  ## Mongo Docker Compose Config
  ##mongo:
  ##  container_name: mongo
  ##  image: mongo:4.4.14-rc0-focal
  ##  restart: always
  ##  ports:
  ##    - "27017:27017"
  ##  expose:
  ##    - "27017"
  ##  volumes:
  ##    - ./mongo-data:/data/db

  ## Keycloak Config with Postgresql database
  ##keycloak-postgres:
  ##  container_name: keycloak-postgres
  ##  image: postgres
  ##  volumes:
  ##    - ./postgres-keycloak:/data/postgres
  ##  environment:
  ##    POSTGRES_DB: keycloak-service
  ##    POSTGRES_USER: postgres
  ##    POSTGRES_PASSWORD: password
  ##    PGDATA: /data/postgres

  ##keycloak:
  ##  container_name: keycloak
  ##  image: quay.io/keycloak/keycloak:18.0.0
  ##  command: [ "start-dev", "--import-realm" ]
  ##  environment:
  ##    DB_VENDOR: POSTGRES
  ##    DB_ADDR: postgres
  ##    DB_DATABASE: keycloak
  ##    DB_USER: keycloak
  ##    DB_PASSWORD: password
  ##    KEYCLOAK_ADMIN: admin
  ##    KEYCLOAK_ADMIN_PASSWORD: admin
  ##  ports:
  ##    - "8080:8080"
  ##  volumes:
  ##    - ./realms/:/opt/keycloak/data/import/
  ##  depends_on:
  ##    - keycloak-postgres

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1


  ## Eureka Server
  ##discovery-server:
  ##  image: microservices-tutorial/discovery-server:latest
  ##  container_name: discovery-server
  ##  ports:
  ##    - "8761:8761"
  ##  environment:
  ##    - SPRING_PROFILES_ACTIVE=docker
##
  ##api-gateway:
  ##  image: microservices-tutorial/api-gateway:latest
  ##  container_name: api-gateway
  ##  ports:
  ##    - "8181:8080"
  ##  expose:
  ##    - "8181"
  ##  environment:
  ##    - SPRING_PROFILES_ACTIVE=docker
  ##    - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
  ##  depends_on:
  ##    - discovery-server
  ##    - keycloak
##
  #### Product-Service Docker Compose Config
  ##product-service:
  ##  container_name: product-service
  ##  image: microservices-tutorial/product-service:latest
  ##  environment:
  ##    - SPRING_PROFILES_ACTIVE=docker
  ##  depends_on:
  ##    - mongo
  ##    - discovery-server
  ##    - api-gateway
##
  #### Order-Service Docker Compose Config
  ##order-service:
  ##  container_name: order-service
  ##  image: microservices-tutorial/order-service:latest
  ##  environment:
  ##    - SPRING_PROFILES_ACTIVE=docker
  ##    - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order-service
  ##  depends_on:
  ##    - postgres-order
  ##    - broker
  ##    - discovery-server
  ##    - api-gateway
##
  #### Inventory-Service Docker Compose Config
  ##inventory-service:
  ##  container_name: inventory-service
  ##  image: microservices-tutorial/inventory-service:latest
  ##  environment:
  ##    - SPRING_PROFILES_ACTIVE=docker
  ##    - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
  ##  depends_on:
  ##    - postgres-inventory
  ##    - discovery-server
  ##    - api-gateway

  ## Notification-Service Docker Compose Config
  ##notification-service:
  ##  container_name: notification-service
  ##  image: microservices-tutorial/notification-service:latest
  ##  environment:
  ##    - SPRING_PROFILES_ACTIVE=docker
  ##  depends_on:
  ##    - broker
  ##    - discovery-server
  ##    - api-gateway